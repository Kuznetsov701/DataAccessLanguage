@page "/"
@inject IAsyncExpressionFactory expressionFactory
@inject HttpClient httpClient
@inject NavigationManager navigationManager

<div class="row">
    <Code Title="Запрос" @bind-Value=@StringExpression class="col-12" style="height: 400px; border: 1px solid #aaaa" />
</div>
<div class="row">
    <button class="btn btn-primary" @onclick="x => Calculate()">Вычислить</button>
</div>
<div class="row">
    <label style="color:orangered">@Errors</label>
</div>
<div class="row">
    <div class="col-12">
        <pre>@(ExpressionResult ?? ExpressionResult)</pre>
    </div>
</div>

@code{
    public string StringExpression { get; set; }
    public string ExpressionResult { get; set; }
    public string Errors { get; set; }

    protected override async Task OnInitializedAsync()
    {
        StringExpression = await httpClient.GetStringAsync(navigationManager.BaseUri + "defaultExpression.txt");
        await Calculate();
    }

    private async Task Calculate()
    {
        try
        {
            JsonSerializerOptions serializerOptions = new JsonSerializerOptions
            {
                WriteIndented = true,
                Encoder = JavaScriptEncoder.Create(UnicodeRanges.BasicLatin, UnicodeRanges.Cyrillic)
            };
            serializerOptions.Converters.Add(new JsonToDictionaryConverter());

            IAsyncExpression expression = expressionFactory.Create(StringExpression);
            object res = await expression.GetValueAsync(new { host = navigationManager.BaseUri });
            ExpressionResult = JsonSerializer.Serialize(res, serializerOptions);

            Errors = null;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Errors = ex.Message;
            StateHasChanged();
        }
    }
}